geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("$\\mathcal{C}^+:$", nunique_tag))
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = expression(paste("\\mathcal{C}^+:", nunique_tag)))
k <- d %>%
mutate(nunique_tag_lab = paste("\\mathcal{C}^+:", nunique_tag))
k$nunique_tag_lab
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = label_bquote(alpha ^ .(nunique_tag_lab)))
print(g)
}
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag, labeller = label_bquote(C^+: .(nunique_tag)))
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag, labeller = label_bquote(C^+\: .(nunique_tag)))
k <- d %>%
mutate(nunique_tag_lab = paste("C^+:", nunique_tag))
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
k <- d %>%
mutate(nunique_tag_lab = paste("C^+:", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("C^+':'", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("C^+", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("Non-zero categories:", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab)
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("Positive count categories:", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab)
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("C^+:", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("C^+", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("|C^+|", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
k <- d %>%
mutate(nunique_tag_lab = paste("|", "C^+", nunique_tag))
k$nunique_tag_lab
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag_lab, labeller = "label_parsed")
print(g)
}
df <- read_analysis_data("XX0")
p <- "^ct_tag_(?!spend)"
d <- df %>%
sample_frac(0.1) %>%
rowwise() %>%
mutate(
across(matches(p, perl = T), ~(.x + 1) / (txns_count_spend + 9), .names = "ps_{col}"),
across(matches(p, perl = T), ~.x / txns_count_spend, .names = "p_{col}"),
ps_std = sd(c_across(starts_with("ps_"))),
p_std = sd(c_across(starts_with("p_"))),
) %>%
ungroup() %>%
mutate(
p_std_q = ntile(p_std, 5),
ps_std_q = ntile(ps_std, 5),
std_tag_q = ntile(std_tag, 5),
txns_count_spend_q = ntile(txns_count_spend, 5),
entropy_tag_pct = ntile(entropy_tag, 100),
entropy_tag_s_pct = ntile(entropy_tag_s, 100)
)
k <- d
facet_var <- c("std_tag_q")
for (v in facet_var) {
g <- k %>%
sample_frac(0.01) %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag)
print(g)
}
d
for (v in facet_var) {
g <- k %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag)
print(g)
}
library(glue)
library(fixest)
library(tidyverse)
source('src/config.R')
source('src/helpers/helpers.R')
# Load data and add lagged entropy variables
df <- read_analysis_data("XX0") %>%
group_by(user_id) %>%
mutate(
across(contains('entropy'), ~lag(.x, n=1), .names = "{.col}_lag"),
has_investments = ifelse(investments > 0, 1, 0),
dspend = dspend / 1000,
month_income_quint = ntile(month_income, 5),
income_var_quint = ntile(income_var, 5)
) %>%
ungroup()
setFixest_fml(
..endog = ~has_sa_inflows,
..comps = ~txns_count_spend + nunique_tag_spend + std_tag_spend,
..controls = ~month_spend + month_income + has_month_income + income_var,
..fe = ~user_id + ym
)
titles <- list(
"has_inflows" = "P(payment into savings accounts)",
"has_investments" = "P(payment into investment funds)"
)
yvars <- c("has_inflows", "has_investments")
for (y in yvars) {
entropy <- entropy_vars(df)
print(
etable(
fixest::feols(.[y] ~ sw(.[,entropy]) + ..controls | ..fe, df),
title = glue('Effect of entropy on {titles[y]}'),
order = c('[Ee]ntropy', '!(Intercept)')
# ,
# tex = T,
# fontsize = 'tiny',
# file=file.path(TABDIR, glue('reg_{y}_{lab}.tex')),
# label = glue('tab:reg_{y}_{lab}'),
# replace = T
)
)
}
# Load data and add lagged entropy variables
df <- read_analysis_data("30k") %>%
group_by(user_id) %>%
mutate(
across(contains('entropy'), ~lag(.x, n=1), .names = "{.col}_lag"),
has_investments = ifelse(investments > 0, 1, 0),
dspend = dspend / 1000,
month_income_quint = ntile(month_income, 5),
income_var_quint = ntile(income_var, 5)
) %>%
ungroup()
for (y in yvars) {
entropy <- entropy_vars(df)
print(
etable(
fixest::feols(.[y] ~ sw(.[,entropy]) + ..controls | ..fe, df),
title = glue('Effect of entropy on {titles[y]}'),
order = c('[Ee]ntropy', '!(Intercept)')
# ,
# tex = T,
# fontsize = 'tiny',
# file=file.path(TABDIR, glue('reg_{y}_{lab}.tex')),
# label = glue('tab:reg_{y}_{lab}'),
# replace = T
)
)
}
library(glue)
library(fixest)
library(tidyverse)
source('src/config.R')
source('src/helpers/helpers.R')
# Load data and add lagged entropy variables
df <- read_analysis_data() %>%
group_by(user_id) %>%
mutate(
across(contains('entropy'), ~lag(.x, n=1), .names = "{.col}_lag"),
has_investments = ifelse(investments > 0, 1, 0),
dspend = dspend / 1000,
month_income_quint = ntile(month_income, 5),
income_var_quint = ntile(income_var, 5)
) %>%
ungroup()
setFixest_fml(
..endog = ~has_sa_inflows,
..comps = ~txns_count_spend + nunique_tag_spend + std_tag_spend,
..controls = ~month_spend + month_income + has_month_income + income_var,
..fe = ~user_id + ym
)
titles <- list(
"has_inflows" = "P(payment into savings accounts)",
"has_investments" = "P(payment into investment funds)"
)
lab <- "main"
yvars <- c("has_inflows", "has_investments")
for (y in yvars) {
entropy <- entropy_vars(df)
print(
etable(
fixest::feols(.[y] ~ sw(.[,entropy]) + ..controls | ..fe, df),
title = glue('Effect of entropy on {titles[y]}'),
order = c('[Ee]ntropy', '!(Intercept)')
# ,
# tex = T,
# fontsize = 'tiny',
# file=file.path(TABDIR, glue('reg_{y}_{lab}.tex')),
# label = glue('tab:reg_{y}_{lab}'),
# replace = T
)
)
}
library(glue)
library(fixest)
library(latex2exp)
library(tidyverse)
source('src/config.R')
source('src/helpers/helpers.R')
theme_set(theme_minimal())
theme_update(
axis.title=element_text(size = 14),
axis.text = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
)
setFixest_fml(
..endog = ~has_sa_inflows,
..comps = ~txns_count_spend + nunique_tag_spend + std_tag_spend,
..controls = ~month_spend + month_income + has_month_income + income_var,
..fe = ~user_id + ym
)
titles <- list(
"has_inflows" = "P(payment into savings accounts)",
"has_investments" = "P(payment into investment funds)"
)
p <- "^ct_tag_(?!spend)"
d <- df %>%
sample_frac(0.1) %>%
rowwise() %>%
mutate(
across(matches(p, perl = T), ~(.x + 1) / (txns_count_spend + 9), .names = "ps_{col}"),
across(matches(p, perl = T), ~.x / txns_count_spend, .names = "p_{col}"),
ps_std = sd(c_across(starts_with("ps_"))),
p_std = sd(c_across(starts_with("p_"))),
) %>%
ungroup() %>%
mutate(
p_std_q = ntile(p_std, 5),
ps_std_q = ntile(ps_std, 5),
std_tag_q = ntile(std_tag, 5),
txns_count_spend_q = ntile(txns_count_spend, 5),
entropy_tag_pct = ntile(entropy_tag, 100),
entropy_tag_s_pct = ntile(entropy_tag_s, 100)
)
facet_var <- c("std_tag_q")
k <- d
for (v in facet_var) {
g <- k %>%
ggplot(aes(entropy_tag_pct, entropy_tag_s_pct, colour=factor(.data[[v]]))) +
geom_point(alpha=1) +
geom_smooth(method = "lm", se = FALSE, colour = "white", size=1) +
facet_wrap(~nunique_tag)
print(g)
}
lab <- "comp"
yvars <- c("has_inflows")
lab <- "comp"
yvars <- c("has_inflows")
evars <- c("entropy_tag_spend_z", "entropy_tag_spend_sz")
for (y in yvars) {
results <- list()
for (e in evars) {
results[[e]] <- feols(.[y] ~ .[e] + sw0(..comps) + ..controls | ..fe, df)
}
print(
etable(
results[[1]], results[[2]],
title = glue('Controlling for entropy components'),
order = c('[Ee]ntropy', "Unique", "Category counts", "Number of")
# ,
# tex = T,
# fontsize = 'tiny',
# file=file.path(TABDIR, glue('reg_{y}_{lab}.tex')),
# label = glue('tab:reg_{y}_{lab}'),
# replace = T
)
)
}
library(dplyr)
library(ggplot2)
source('./src/config.R')
source('./src/helpers/helpers.R')
df <- read_analysis_data()
names(df)
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99,
ntile(yr_spend, 100) <= 99
) %>%
bind_rows(read_lcfs())
lcfs_density <- function(data, mapping, xlabel) {
ggplot(data, mapping) +
geom_density() +
scale_x_continuous(labels = scales::comma) +
labs(x = xlabel, y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
}
fn <- "year_income.pdf"
lcfs_density(lcfs, aes(yr_income, colour = source), "Disposable income (£) in 2019")
fn <- "year_spend.pdf"
lcfs_density(lcfs, aes(yr_spend, colour = source), "Total spend (£) in 2019")
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99,
ntile(yr_spend, 100) <= 95
) %>%
bind_rows(read_lcfs())
summary(lcfs$yr_spend)
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99,
ntile(yr_spend, 100) <= 80
) %>%
bind_rows(read_lcfs())
summary(lcfs$yr_spend)
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_spend, 100) <= 80,
ntile(yr_income, 100) <= 99
) %>%
bind_rows(read_lcfs())
summary(lcfs$yr_spend)
summary(df$yr_spend)
summary(df$month_spend)
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
)
summary(lcfs$yr_spend)
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
bind_rows(read_lcfs())
summary(lcfs$yr_spend)
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
bind_rows(read_lcfs()) %>%
filter(
ntile(yr_spend, 100) <= 99,
ntile(yr_income, 100) <= 99
)
lcfs_density(lcfs, aes(yr_income, colour = source), "Disposable income (£) in 2019")
lcfs_density(lcfs, aes(yr_spend, colour = source), "Total spend (£) in 2019")
