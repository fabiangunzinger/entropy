colour = unname(TeX(varlabs[[v]]))
) +
theme(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title=element_text(size = 20)
)
fn <- glue("scatter_facet_{v}.png")
ggsave(file.path(FIGDIR, fn), height = 2000, width = 3000, units = "px")
}
g
library(glue)
library(fixest)
library(latex2exp)
library(tidyverse)
source('src/config.R')
source('src/helpers/helpers.R')
theme_set(theme_minimal())
df <- read_analysis_data()
library(dplyr)
library(ggplot2)
source('./src/config.R')
source('./src/helpers/helpers.R')
lcfs_data <- read_lcfs()
df <- read_analysis_data()
names(df)
library(dplyr)
library(ggplot2)
source('./src/config.R')
source('./src/helpers/helpers.R')
lcfs_data <- read_lcfs()
df <- read_analysis_data()
names(df)
df
dfs <- df %>%
sample_frac(0.001)
dfs
dfs %>%
ggplot(aes(entropy_tag, entropy_tag_s)) %>%
geom_point()
dfs %>%
ggplot(aes(entropy_tag, entropy_tag_s)) +
geom_point()
dfs %>%
ggplot(aes(entropy_tag, entropy_tag_s, colour = txns_count_spend)) +
geom_point()
dfs %>%
ggplot(aes(entropy_tag, entropy_tag_s, colour = nunique_tag)) +
geom_point()
dfs %>%
ggplot(aes(entropy_tag, entropy_tag_s, colour = factor(nunique_tag))) +
geom_point()
base <- dfs %>%
ggplot(aes(entropy_tag, entropy_tag_s, colour = factor(nunique_tag))) +
geom_point()
base %>% theme_minimal()
base + theme_minimal()
base + theme_grey()
base + theme_bw()
base + theme_minimal()
base + theme_light()
base + theme_minimal()
base + theme_light()
theme_set(theme_minimal())
base
theme_update(
plot.background = element_rect(fill = 'lightblue')
)
base
theme_set(theme_minimal())
base
# Set complete scheme as baseline
theme_set(theme_minimal())
# Customise elements
theme_update(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
legend.position = c(0.9, 0.9)
)
base <- df %>%
sample_frac(0.001) %>%
ggplot(aes(entropy_tag, entropy_tag_s, colour = factor(nunique_tag))) +
geom_point()
base
# Set complete scheme as baseline
theme_set(theme_minimal())
# Customise elements
theme_update(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
)
base <- df %>%
sample_frac(0.001) %>%
ggplot(aes(entropy_tag, entropy_tag_s, colour = factor(nunique_tag))) +
geom_point()
base
# Customise elements
theme_update(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_rect(size = 20)
)
# Customise elements
theme_update(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20)
)
base
base %>% theme(legend.title = element_text(size=40))
base %>% theme(legend.title = element_text(size=40))
base %>% theme(legend.title = element_text(size=30))
base %>%
theme(legend.title = element_text(face="bold"))
base <- df %>%
sample_frac(0.001) %>%
ggplot(aes(entropy_tag, entropy_tag_s, colour = factor(nunique_tag))) +
geom_point()
base %>%
theme(legend.title = element_text(face="bold"))
base +
theme(legend.title = element_text(face="bold"))
base +
theme(legend.title = element_text(size = 40))
base
# Set complete scheme as baseline
theme_set(theme_minimal())
# Customise elements
theme_update(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20)
)
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density', color = "") +
theme(legend.position = c(0.9, 0.9))
# Customise elements
theme_update(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.background = element_rect(colour = "black")
)
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density', color = "") +
theme(legend.position = c(0.9, 0.9))
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density', color = NA) +
theme(legend.position = c(0.9, 0.9))
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density', color = NA) +
theme(
legend.position = c(0.9, 0.9), legend.title = element_blank())
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9), legend.title = element_blank())
# Customise elements
theme_update(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
)
# Set complete scheme as baseline
theme_set(theme_minimal())
# Customise elements
theme_update(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
legend.title = element_text(size = 20),
)
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9), legend.title = element_blank())
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_histogram(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
df %>%
filter(ymn == 201904)
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_hist(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
fn <- "year_income.svg"
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
ggsave(file.path(FIGDIR, fn), height = 2000, width = 3000, units = "px")
fn <- "year_income.pdf"
df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
source = 'APP'
) %>%
filter(ntile(yr_income, 100) <= 99) %>%
bind_rows(lcfs_data) %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
ggsave(file.path(FIGDIR, fn), height = 2000, width = 3000, units = "px")
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99,
ntile(yr_spend, 100) <= 99
) %>%
bind_rows(lcfs_data) %>%
fn <- "year_income.pdf"
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99,
ntile(yr_spend, 100) <= 99
) %>%
bind_rows(lcfs_data)
lcfs %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
lcfs %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 0.2) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
lcfs %>%
ggplot() +
geom_density(aes(yr_income, color = source), alpha = 1) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
lcfs %>%
ggplot(aes(yr_income, color = source)) +
geom_density(alpha = 1) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
lcfs_data <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99,
ntile(yr_spend, 100) <= 99
) %>%
bind_rows(read_lcfs())
lcfs_data %>%
ggplot(aes(yr_income, color = source)) +
geom_density(alpha = 1) +
scale_x_continuous(labels = scales::comma) +
labs(x = 'Disposable income (£) in 2019', y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
lcfs_density <- function(data, mapping, xlabel) {
ggplot(data, mapping) +
geom_density() +
scale_x_continuous(labels = scales::comma) +
labs(x = xlabel, y = 'Density') +
theme(
legend.position = c(0.9, 0.9),
legend.title = element_blank()
)
}
lcfs_density(df, aes(yr_income, colour = source), "Disposable income (£) in 2019")
lcfs_density(lcfs_data, aes(yr_income, colour = source), "Disposable income (£) in 2019")
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99,
ntile(yr_spend, 100) <= 99
) %>%
bind_rows(read_lcfs())
lcfs_density(lcfs, aes(yr_income, colour = source), "Disposable income (£) in 2019")
fn <- "year_income.pdf"
lcfs_density(lcfs, aes(yr_income, colour = source), "Disposable income (£) in 2019")
ggsave(file.path(FIGDIR, fn), height = 2000, width = 3000, units = "px")
ggsave(file.path(FIGDIR, fn), height = 1000, width = 3000, units = "px")
ggsave(file.path(FIGDIR, fn), height = 1500, width = 3000, units = "px")
ggsave(file.path(FIGDIR, fn), height = 1000, width = 2000, units = "px")
?ggsave
ggsave(file.path(FIGDIR, fn), height = 10, width = 20, units = "cm")
fn <- "year_spend.pdf"
lcfs_density(lcfs, aes(yr_spend, colour = source), "Total spend (£) in 2019")
ggsave(file.path(FIGDIR, fn), height = 10, width = 20, units = "cm")
fn <- "year_spend.pdf"
lcfs_density(lcfs, aes(yr_spend, colour = source), "Total spend (£) in 2019")
ggsave(file.path(FIGDIR, fn), height = 10, width = 20, units = "cm")
fn <- "age.pdf"
df %>%
group_by(user_id) %>%
summarise(age = first(age)) %>%
count(age) %>%
ggplot() +
geom_point(aes(age, n / sum(n)), colour = palette[1]) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Age", y = "Percent") +
theme(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20)
)
ggsave(file.path(FIGDIR, fn), height = 2000, width = 3000, units = "px")
fn <- "region.pdf"
df %>%
group_by(user_id) %>%
summarise(region = first(region)) %>%
count(region) %>%
mutate(region = tools::toTitleCase(region), prop = n / sum(n)) %>%
ggplot() +
geom_bar(aes(y = reorder(region, prop), x = prop),
stat = "identity",  fill =  palette[1]) +
scale_x_continuous(labels = scales::percent) +
theme(legend.position = "none") +
labs(x = 'Percent', y = 'Region') +
theme(
axis.title=element_text(size = 20),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20)
)
ggsave(file.path(FIGDIR, fn), height = 2000, width = 3000, units = "px")
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99,
ntile(yr_spend, 100) <= 95
) %>%
bind_rows(read_lcfs())
lcfs_density(lcfs, aes(yr_spend, colour = source), "Total spend (£) in 2019")
lcfs <- df %>%
filter(ymn == 201904) %>%
transmute(
yr_income = year_income * 1000,
yr_spend = month_spend * 12 * 1000,
source = 'MDB'
) %>%
filter(
ntile(yr_income, 100) <= 99 & ntile(yr_spend, 100) <= 95
) %>%
bind_rows(read_lcfs())
lcfs_density(lcfs, aes(yr_spend, colour = source), "Total spend (£) in 2019")
ntile(df, yr_spend, 100)
df %>% ntile(yr_spend, 100)
ntile(df$yr_spend, 100)
